library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;
use ieee.std_logic_textio.all;

entity Testbench is
end entity;

architecture RLEncoder_tb of Testbench is
	component RLEncoder
		port( clk, rst: in std_logic;
		char: in std_logic_vector(7 downto 0);
		valid: out std_logic;
		char_out: out std_logic_vector(7 downto 0));
	end component;
	signal clk, rst, valid: std_logic;
	signal char, char_out: std_logic_vector(7 downto 0);
	begin
		inst: RLEncoder port map(clk, rst, char, valid, char_out);
		process
			variable LINE_COUNT: integer := 0;
			variable INPUT_LINE: line;
			variable OUTPUT_LINE: line;
			variable input_char: std_logic_vector(7 downto 0);
			file INFILE: text;
			file OUTFILE: text;
		begin
			rst <= '1';
			char <= (others => '0');
			clk <= '0';
			wait for 1ns;
			rst <= '1';
			char <= (others => '0');
			clk <= '1';
			wait for 1ns;
			rst <= '0';
			char <= (others => '0');
			clk <= '1';
			wait for 1ns;
			file_open(INFILE, "D:\CS 232 Lab\shubh\input.txt",  read_mode);
			file_open(OUTFILE, "D:\CS 232 Lab\shubh\output.txt", write_mode);
			while LINE_COUNT<128 loop
				LINE_COUNT := LINE_COUNT + 1;
				if LINE_COUNT < 64 then
					readline(INFILE, INPUT_LINE);
					read(INPUT_LINE, input_char);
					char <= input_char;
				else
					char <= (others => '0');
				end if;
				if valid = '1' then
					write(OUTPUT_LINE, char_out);
					writeline(OUTFILE, OUTPUT_LINE);
				end if;
				clk <= '1';
				wait for 1ns;
				clk <= '0';
				wait for 1ns;
				report "line_count = " & integer'image(LINE_COUNT);
			end loop;
			file_close(OUTFILE);
		end process;
				
end architecture;
